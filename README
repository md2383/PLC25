Directions on building the project in a Linux environment for the cs machines.


1. Compile the Java files. Make sure you include the [ -d Root ] tag to specify 
    the Root directory as the root for the package structure, or the package 
    structure will be implemented in the current directory:

    > [ javac -d Root $(find Root -name "*.java") ]

2. To run the program, you must do one of the following:

  - ### PHASE 1: ###
    To run the JottTokenizerTester class; you need to specify the correct package name.

    > [ java -cp Root testers.JottTokenizerTester ]

  - ### PHASE 2: ###
    To run the JottParserTester class; you need to specify the correct package name.

    > [ java -cp Root testers.JottParserTester ]

  - ### PHASE 3: ###
    To run the main method; the program must have a Jott file input as a command line argument.

    > [ java -cp Root main.Jott input.jott ]

    Where input.jott is any generic jott file ( assumed to be on the same file level as Jott.java )
    
    There is also a tester class for use with the "phase3testcases" file if applicable. 
    As long as everything is compiled from the folder containing "Root" and "phase3testcases",
    the JottValidTester class will run through every file in the "phase3testcases" file, and 
    output any syntax/semantic errors.

    > [ java -cp Root testers.JottValidTester ]



DEV NOTE: ---
    If you are debugging/testing, make sure you enable assertions. 
    Debugging/Testing also requires the exterior test case packages.
    This should ONLY be used for testing, and not on the final version for each phase.
    The correct tag/vmArg is: -ea

        PHASE 1:
        > [ java -ea -cp Root testers.JottTokenizerTester ]
        PHASE 2:
        > [ java -ea -cp Root testers.JottParserTester ]
        PHASE 3:
        > [ java -ea -cp Root tester.JottValidTester ]
        > [ java -ea -cp Root main.Jott [input.jott] ]
